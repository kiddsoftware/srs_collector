# -*- mode: coffee -*-

# Replace style names with single letters for size.
$.fn.wysihtml5.locale.en.emphasis.bold = "B"
$.fn.wysihtml5.locale.en.emphasis.italic = "I"
$.fn.wysihtml5.locale.en.emphasis.underline = "U"

# Configure toolbar.
$.fn.wysihtml5.defaultOptions["font-styles"] = false
$.fn.wysihtml5.defaultOptions["lists"] = false
# Might implement as a for-pay feature some day.  Needs database support.
$.fn.wysihtml5.defaultOptions["image"] = false
# We want this, but it requires us to add stylesheets to the Anki cards.
$.fn.wysihtml5.defaultOptions["color"] = false
$.fn.wysihtml5.defaultOptions["toolbar"] =
  formatting: (locale, options) ->
    "<li><div class='btn-group'><a class='btn btn-default' data-wysihtml5-command='removeFormat' title='Plain text' tabindex='-1' href='javascript:;'>P</i></a><a class='btn btn-default' data-wysihtml5-command='unlink' title='Remove links' tabindex='-1' href='javascript:;'><i class='glyphicon glyphicon-minus-sign'></i></a></div></li>"
  lookup: (locale, options) ->
    "<li><div class='btn-group'><a class='btn btn-default translate' title='Translate the text' tabindex='-1' href='javascript:;'>Translate</a><a class='btn btn-default lookup' title='Look up the selected text' tabindex='-1' href='javascript:;'>Lookup</a></div></li>"
$.fn.wysihtml5.defaultOptions["parserRules"] =
  tags:
    p: 1
    br: 1
    b: 1
    i: 1
    u: 1
    sup: 1
    sub: 1
    ul:
      rename_tag: "div"
    li:
      rename_tag: "div"
    img:
      check_attributes:
        width: "numbers"
        height: "numbers"
        src: "url"
    # We don't actually need to remove these (they'll theoretically get
    # converted to span by default), but it's nice to remove them entirely.
    applet:
      remove: 1
    area:
      remove: 1
    audio:
      remove: 1
    base:
      remove: 1
    basefont:
      remove: 1
    bgsound:
      remove: 1
    canvas:
      remove: 1
    col:
      remove: 1
    colgroup:
      remove: 1
    command:
      remove: 1
    comment:
      remove: 1
    del:
      remove: 1
    device:
      remove: 1
    embed:
      remove: 1
    frame:
      remove: 1
    frameset:
      remove: 1
    head:
      remove: 1
    iframe:
      remove: 1
    input:
      remove: 1
    isindex:
      remove: 1
    keygen:
      remove: 1
    link:
      remove: 1
    map:
      remove: 1
    meta:
      remove: 1
    nextid:
      remove: 1
    noembed:
      remove: 1
    noframes:
      remove: 1
    noscript:
      remove: 1
    object:
      remove: 1
    param:
      remove: 1
    script:
      remove: 1
    source:
      remove: 1
    spacer:
      remove: 1
    style:
      remove: 1
    svg:
      remove: 1
    title:
      remove: 1
    track:
      remove: 1
    wbr:
      remove: 1
    video:
      remove: 1
    xml:
      remove: 1

$.fn.wysihtml5.defaultOptions["stylesheets"] =
  [<%= asset_path('wysihtml5.css').to_json %>]

SrsCollector.RichEditorComponent = Ember.Component.extend
  classNames: ['rich-editor']

  # Is the user allowed to paste images into this field?
  imagesAllowed: false

  didInsertElement: ->
    # We call 'val' here because sometimes the underlying textarea value
    # gets lost when moving between routes.  This seems to fix it.
    @$(".wysihtml5").val(@get("value")).wysihtml5()
    @editor = @$('.wysihtml5').data("wysihtml5").editor
    @editor.on("change", @onEditorChange.bind(this))
    @editor.on("paste", @onPaste.bind(this))
    @$(".btn.translate").on("click", @onTranslate.bind(this))
    @$(".btn.lookup").on("click", @onLookup.bind(this))

  willDestroyElement: ->
    @$(".btn.lookup").off("click")
    @$(".btn.translate").off("click")
    #@editor.off("change")
    #@editor.off("paste")
    @editor = null

  onModelChange: (->
    value = @get("value")
    # Don't set this unless we absolutely have to.  Among other things, we
    # don't want to clobber the selection when the user clicks "Lookup".
    if @editor.getValue() != value
      @editor.setValue(value, true)

    # Clear our undo history.
    # TODO: Upgrade to version of wysihtml5 where this is supported.
    #undo = @editor.composer.undoManager
    #undo.position = 0
    #undo.historyStr = []
    #undo.historyDom = []
    #undo.transact()

    # Fix our placeholder.  The editor should really take care of this itself!
    if value?
      @editor.fire("unset_placeholder")
    else
      @editor.fire("set_placeholder")
  ).observes("value")

  onEditorChange: ->
    # Copy this back manually.  We might need to tweak this some more.
    @set("value", @editor.getValue())

  onPaste: ->
    # Clean up nasty &nbsp; garbage that appears when we paste from some
    # sites.
    @editor.setValue(@editor.getValue().replace(/&nbsp;/g, ' '))
    # Strip images if they're not allowed.  This is also handled by the
    # backend, which won't cache images unless the user is authorized.
    unless @get("imagesAllowed")
      $(@editor.composer.doc).find("img").remove()

  onTranslate: ->
    text = @editor.composer.selection.getText()
    if text? && !text.match(/^\s*$/)
      haveSelection = true
    else
      text = $(@editor.composer.doc).find("body").text()
      haveSelection = false
    console.log("Translate:", text)

    if text? && !text.match(/^\s*$/)
      @editor.composer.commands.exec("bold") if haveSelection
      # Fire a change event manually so boldface gets written to our model.
      @editor.fire("change")
      # Delay our call to sendAction so the boldface text has a chance to
      # stick before anyone calls getValue/setValue on our editor.
      Ember.run.next this, ->
        @sendAction("translate", [text, haveSelection])

  onLookup: ->
    text = @editor.composer.selection.getText()
    console.log("Lookup:", text)
    if text? && !text.match(/^\s*$/)
      @editor.composer.commands.exec("bold")
      # Fire a change event manually so boldface gets written to our model.
      @editor.fire("change")
      # Delay our call to sendAction so the boldface text has a chance to
      # stick before anyone calls getValue/setValue on our editor.
      Ember.run.next this, ->
        @sendAction("lookup", text)
